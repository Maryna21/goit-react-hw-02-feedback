{"version":3,"sources":["componets/Notification/notification.js","componets/Statistics/statistics.js","componets/FeedbackOptions/feedbackOptions.js","componets/Section/section.js","componets/FeedbackStatistics/feedbackStatistics.js","App.js","reportWebVitals.js","index.js"],"names":["Notification","message","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","Section","title","children","FeedbackStatistics","state","e","feedback","currentTarget","setState","prevState","Number","countTotalFeedback","Object","values","reduce","acc","value","countPositiveFeedbackPercentage","Math","round","this","Component","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAAe,SAASA,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACnC,OAAO,+BAAOA,ICAH,SAASC,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC5D,OACI,qCACCD,EAAQ,GACL,qCACD,4CACC,+BACA,uCAAUH,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,aAIO,IAAVD,GAAe,cAACN,EAAD,CAAcC,QAAQ,yBChB/B,SAASO,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAC/C,OACA,mCACCD,EAAQE,KAAI,SAAAC,GAAM,OAAI,wBAAQC,KAAK,SAAsBC,KAAMF,EAAQG,QAASL,EAA1D,SAA4EE,GAAjDA,QCHvC,SAASI,EAAT,GAAqC,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,SACrC,OACI,oCACI,6BAAKD,IACJC,K,ICCPC,E,4MASFC,MAAQ,CACJjB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAETK,gBAAmB,SAAAW,GACf,IAAMC,EAAWD,EAAEE,cAAcT,KACjC,EAAKU,UAAU,SAAAC,GAAS,sBACrBH,EAAWI,OAAOD,EAAUH,GAAY,Q,EAK/CK,mBAAqB,WACjB,OAAOC,OAAOC,OAAO,EAAKT,OAAOU,QAAO,SAACC,EAAIC,GAAL,OAAcD,EAAMC,IAAO,I,EAGvEC,gCAAkC,WAAM,IAAD,EACpB,EAAKb,MAAbjB,YAD4B,MACvB,EADuB,EAE7BG,EAAQ,EAAKqB,qBACnB,OAAOrB,EAAQ4B,KAAKC,MAAOhC,EAAKG,EAAO,KAAK,G,uDAI5C,IAAMc,EAAQgB,KAAKhB,MAClB,OACD,qCACG,cAACJ,EAAD,CAASC,MAAO,wBAAhB,SACC,cAACT,EAAD,CAAiBC,QAAS,CAAC,OAAO,UAAU,OAAQC,gBAAiB0B,KAAK1B,oBAE1E,cAACM,EAAD,CAASC,MAAO,GAAhB,SACA,cAACf,EAAD,CAAYC,KAAMiB,EAAMjB,KAAMC,QAASgB,EAAMhB,QAASC,IAAKe,EAAMf,IAAKC,MAAO8B,KAAKT,qBAAsBpB,mBAAoB6B,KAAKH,6C,GAxC5GI,aAA3BlB,EACKmB,aAAe,GA4CXnB,QCvCAoB,MARf,WACE,OACE,mCACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8fc29ed3.chunk.js","sourcesContent":["export default function Notification({ message }) {\n    return(<span>{message}</span>)\n}","import Notification from 'componets/Notification/notification';\nexport default function Statistics({ good, neutral, bad, total, positivePercentage }) {\n    return (\n        <>\n        {total > 0 &&(\n            <>\n           <h3>Statistics</h3>\n            <ul>\n            <li>Good:{good}</li>\n            <li>Neutral:{neutral}</li>\n            <li>Bad:{bad}</li>\n            <li>Total:{total}</li>\n            <li>Positive Feedback:{positivePercentage}%</li>\n        </ul>\n        </>\n        )} \n        {total === 0 && <Notification message=\"No feedback given\"/> } \n        </>\n    \n    )\n}","export default function FeedbackOptions({ options, onLeaveFeedback }) {\n    return ( \n    <>\n    {options.map(option =>(<button type=\"button\" key={option} name={option} onClick={onLeaveFeedback}>{option}</button>))}\n    </>          \n     )\n}","export default function Section ({title, children}){\n    return(\n        <section>\n            <h2>{title}</h2>\n            {children}\n        </section>\n    )\n}","import React, { Component } from 'react';\nimport Statistics from 'componets/Statistics/statistics';\nimport FeedbackOptions from 'componets/FeedbackOptions/feedbackOptions';\nimport Section from 'componets/Section/section';\n\nclass FeedbackStatistics extends Component {\n    static defaultProps = {\n        // \n    };\n\n    static propTypes = {\n        //\n    };\n\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0\n    }\n    onLeaveFeedback =  e => {\n        const feedback = e.currentTarget.name;\n        this.setState((prevState => ({\n          [feedback]: Number(prevState[feedback] + 1)}\n     )))\n    \n     }\n\n    countTotalFeedback = ()=> {\n        return Object.values(this.state).reduce((acc,value)=> acc + value, 0)\n     };\n\n    countPositiveFeedbackPercentage = () =>{\n        const {good=0}=this.state;\n        const total = this.countTotalFeedback();\n        return total ? Math.round((good/total)*100):0;\n     };\n\n    render() { \n        const state = this.state;\n         return (\n        <>\n           <Section title={'Please leave feedback'} >\n            <FeedbackOptions options={['good','neutral','bad']} onLeaveFeedback={this.onLeaveFeedback}/>\n            </Section>\n            <Section title={''} >\n            <Statistics good={state.good} neutral={state.neutral} bad={state.bad} total={this.countTotalFeedback()} positivePercentage={this.countPositiveFeedbackPercentage()} /> \n            </Section>\n        </>)\n    }\n}\nexport default FeedbackStatistics;","// import './App.css';\nimport FeedbackStatistics from 'componets/FeedbackStatistics/feedbackStatistics';\n\nfunction App() {\n  return (\n    <>\n      <FeedbackStatistics/>\n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}