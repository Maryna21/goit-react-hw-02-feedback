{"version":3,"sources":["componets/Statistics/statistics.module.css","componets/Notification/notification.js","componets/Statistics/statistics.js","componets/FeedbackOptions/feedbackOptions.js","componets/Section/section.js","componets/FeedbackStatistics/feedbackStatistics.js","App.js","reportWebVitals.js","index.js","componets/FeedbackOptions/feedbackOptions.module.css","componets/Section/section.module.css"],"names":["module","exports","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","className","s","list","item","FeedbackOptions","options","onLeaveFeedback","map","option","button","type","name","onClick","Section","title","children","section","FeedbackStatistics","state","e","feedback","currentTarget","setState","prevState","Number","countTotalFeedback","Object","values","reduce","acc","value","countPositiveFeedbackPercentage","Math","round","this","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,KAAO,yBAAyB,KAAO,2B,oJCD1C,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACnC,OAAO,+BAAOA,I,oBCEH,SAASC,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC5D,OACI,qCACCD,EAAQ,GACL,qCACD,4CACC,qBAAIE,UAAWC,IAAEC,KAAjB,UACA,qBAAIF,UAAWC,IAAEE,KAAjB,mBAA+BR,KAC/B,qBAAIK,UAAWC,IAAEE,KAAjB,sBAAiCP,KACjC,qBAAII,UAAWC,IAAEE,KAAjB,kBAA6BN,KAC7B,qBAAIG,UAAWC,IAAEE,KAAjB,oBAA+BL,KAC/B,qBAAIE,UAAWC,IAAEE,KAAjB,gCAA2CJ,EAA3C,aAIO,IAAVD,GAAe,cAACN,EAAD,CAAcC,QAAQ,yB,oBChB/B,SAASW,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAC/C,OACA,mCACCD,EAAQE,KAAI,SAAAC,GAAM,OAAI,wBAAQR,UAAWC,IAAEQ,OAAQC,KAAK,SAAsBC,KAAMH,EAAQI,QAASN,EAA/E,SAAiGE,GAAjDA,Q,oBCJ5D,SAASK,EAAT,GAAqC,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,SACrC,OACI,0BAASf,UAAWC,IAAEe,QAAtB,UACI,6BAAKF,IACJC,K,ICqCEE,E,4MApCXC,MAAQ,CACJvB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAETS,gBAAmB,SAAAa,GACf,IAAMC,EAAWD,EAAEE,cAAcV,KACjC,EAAKW,UAAU,SAAAC,GAAS,sBACrBH,EAAWI,OAAOD,EAAUH,GAAY,Q,EAK/CK,mBAAqB,WACjB,OAAOC,OAAOC,OAAO,EAAKT,OAAOU,QAAO,SAACC,EAAIC,GAAL,OAAcD,EAAMC,IAAO,I,EAGvEC,gCAAkC,WAAM,IAAD,EACpB,EAAKb,MAAbvB,YAD4B,MACvB,EADuB,EAE7BG,EAAQ,EAAK2B,qBACnB,OAAO3B,EAAQkC,KAAKC,MAAOtC,EAAKG,EAAO,KAAK,G,uDAI5C,IAAMoB,EAAQgB,KAAKhB,MAClB,OACD,qCACG,cAACL,EAAD,CAASC,MAAO,wBAAhB,SACC,cAACV,EAAD,CAAiBC,QAAS,CAAC,OAAO,UAAU,OAAQC,gBAAiB4B,KAAK5B,oBAE1E,cAACO,EAAD,CAASC,MAAO,GAAhB,SACA,cAACpB,EAAD,CAAYC,KAAMuB,EAAMvB,KAAMC,QAASsB,EAAMtB,QAASC,IAAKqB,EAAMrB,IAAKC,MAAOoC,KAAKT,qBAAsB1B,mBAAoBmC,KAAKH,6C,GAhC5GI,aCMlBC,MARf,WACE,OACE,mCACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfA/C,EAAOC,QAAU,CAAC,OAAS,kC,kBCA3BD,EAAOC,QAAU,CAAC,QAAU,4B","file":"static/js/main.d57b8d8f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"statistics_list__zEoGO\",\"item\":\"statistics_item__2G-z_\"};","export default function Notification({ message }) {\n    return(<span>{message}</span>)\n}","import PropTypes from 'prop-types';\nimport Notification from 'componets/Notification/notification';\nimport s from 'componets/Statistics/statistics.module.css';\nexport default function Statistics({ good, neutral, bad, total, positivePercentage }) {\n    return (\n        <>\n        {total > 0 &&(\n            <>\n           <h3>Statistics</h3>\n            <ul className={s.list}>\n            <li className={s.item} >Good: {good}</li>\n            <li className={s.item}>Neutral: {neutral}</li>\n            <li className={s.item}>Bad: {bad}</li>\n            <li className={s.item}>Total: {total}</li>\n            <li className={s.item}>Positive Feedback: {positivePercentage}%</li>\n        </ul>\n        </>\n        )} \n        {total === 0 && <Notification message=\"No feedback given\"/> } \n        </>\n    \n    )\n}\nStatistics.propTypes = {\n    good: PropTypes.number,\n    neutral: PropTypes.number,\n    bad: PropTypes.number,\n    total: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.bool,\n    ]),\n    positivePercentage:PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.bool,\n    ]),\n}","import PropTypes from 'prop-types';\nimport s from 'componets/FeedbackOptions/feedbackOptions.module.css';\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n    return ( \n    <>\n    {options.map(option =>(<button className={s.button} type=\"button\" key={option} name={option} onClick={onLeaveFeedback}>{option}</button>))}\n    </>          \n     )\n}\nFeedbackOptions.propTypes = {\n    options: PropTypes.array,\n    onLeaveFeedback: PropTypes.func, \n}","import s from 'componets/Section/section.module.css'\nexport default function Section ({title, children}){\n    return(\n        <section className={s.section}>\n            <h2>{title}</h2>\n            {children}\n        </section>\n    )\n}","import React, { Component } from 'react';\nimport Statistics from 'componets/Statistics/statistics';\nimport FeedbackOptions from 'componets/FeedbackOptions/feedbackOptions';\nimport Section from 'componets/Section/section';\n\nclass FeedbackStatistics extends Component {\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0\n    }\n    onLeaveFeedback =  e => {\n        const feedback = e.currentTarget.name;\n        this.setState((prevState => ({\n          [feedback]: Number(prevState[feedback] + 1)}\n     )))\n    \n     }\n\n    countTotalFeedback = ()=> {\n        return Object.values(this.state).reduce((acc,value)=> acc + value, 0)\n     };\n\n    countPositiveFeedbackPercentage = () =>{\n        const {good=0}=this.state;\n        const total = this.countTotalFeedback();\n        return total ? Math.round((good/total)*100):0;\n     };\n\n    render() { \n        const state = this.state;\n         return (\n        <>\n           <Section title={'Please leave feedback'} >\n            <FeedbackOptions options={['good','neutral','bad']} onLeaveFeedback={this.onLeaveFeedback}/>\n            </Section>\n            <Section title={''} >\n            <Statistics good={state.good} neutral={state.neutral} bad={state.bad} total={this.countTotalFeedback()} positivePercentage={this.countPositiveFeedbackPercentage()} /> \n            </Section>\n        </>)\n    }\n}\nexport default FeedbackStatistics;","// import './App.css';\nimport FeedbackStatistics from 'componets/FeedbackStatistics/feedbackStatistics';\n\nfunction App() {\n  return (\n    <>\n      <FeedbackStatistics/>\n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"feedbackOptions_button__DDeC2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"section_section__P7jFB\"};"],"sourceRoot":""}